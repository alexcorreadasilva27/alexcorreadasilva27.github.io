{"ast":null,"code":"var _jsxFileName = \"/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Context/PlanetProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsAPI from '../services/planetsAPI';\nimport PlanetContext from './PlanetsContext';\n\nfunction PlanetProvider(props) {\n  const [data, setdata] = seState([]);\n  const [isLoding, setIsLoading] = useState(true);\n  const [loadError, setadError] = useState(false);\n  useEffect(() => {\n    const loading = async () => {\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getInfoPlanets = await planetsAPI();\n        setData(getInfoPlanets.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n\n    loading();\n  }, []);\n  const context = {\n    data,\n    isLoading,\n    loadError\n  };\n  const {\n    children\n  } = props;\n  return /*#__PURE__*/React.createElement(PlanetContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;\nexport default PlanetProvider;","map":{"version":3,"sources":["/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Context/PlanetProvider.js"],"names":["React","useEffect","useState","PropTypes","planetsAPI","PlanetContext","PlanetProvider","props","data","setdata","seState","isLoding","setIsLoading","loadError","setadError","loading","setLoadError","getInfoPlanets","setData","results","error","context","isLoading","children","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBC,OAAO,CAAC,EAAD,CAA/B;AACA,QAAM,CAACC,QAAD,EAAWC,YAAX,IAA2BV,QAAQ,CAAC,IAAD,CAAzC;AACD,QAAO,CAACW,SAAD,EAAYC,UAAZ,IAA2BZ,QAAQ,CAAC,KAAD,CAA1C;AACCD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,OAAO,GAAG,YAAY;AAC1B,UAAI;AACFH,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAI,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,cAAMC,cAAc,GAAG,MAAMb,UAAU,EAAvC;AACAc,QAAAA,OAAO,CAACD,cAAc,CAACE,OAAhB,CAAP;AACAP,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAND,CAME,OAAOQ,KAAP,EAAc;AACdJ,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAXD;;AAYAG,IAAAA,OAAO;AACR,GAdQ,EAcN,EAdM,CAAT;AAeA,QAAMM,OAAO,GAAG;AAAEb,IAAAA,IAAF;AAAQc,IAAAA,SAAR;AAAmBT,IAAAA;AAAnB,GAAhB;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAehB,KAArB;AACA,sBAEE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAGc,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIE,QADJ,CAFF;AAMD;;AAEDjB,cAAc,CAACkB,SAAf,GAA2B;AACzBD,EAAAA,QAAQ,EAAEpB,SAAS,CAACsB;AADK,EAEzBC,UAFF;AAIA,eAAepB,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsAPI from '../services/planetsAPI';\nimport PlanetContext from './PlanetsContext';\n\nfunction PlanetProvider(props) {\n  const [data, setdata] = seState([]);\n  const [isLoding, setIsLoading] = useState(true);\n const  [loadError, setadError]  = useState(false);\n  useEffect(() => {\n    const loading = async () => {\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getInfoPlanets = await planetsAPI();\n        setData(getInfoPlanets.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n    loading();\n  }, []);\n  const context = { data, isLoading, loadError };\n  const { children } = props;\n  return (\n\n    <PlanetContext.Provider value={ context }>\n      { children }\n    </PlanetContext.Provider>\n  );\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default PlanetProvider;\n"]},"metadata":{},"sourceType":"module"}