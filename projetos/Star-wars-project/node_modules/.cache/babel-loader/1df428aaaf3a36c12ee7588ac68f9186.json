{"ast":null,"code":"var _jsxFileName = \"/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Context/PlanetProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsAPI from '../services/planetsAPI';\nimport PlanetContext from './PlanetsContext';\n\nfunction PlanetProvider(props) {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [copyResults, setCopyResults] = useState([]);\n  const [filters, setFilters] = useState({\n    filteByName: {\n      name: ''\n    }\n  });\n  useEffect(() => {\n    const setFilterName = event => {\n      const {\n        value\n      } = event.target;\n      setFilters({\n        filteByName: {\n          name: value.toLowerCase()\n        }\n      });\n    };\n\n    const loading = async () => {\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getInfoPlanets = await planetsAPI();\n        setData(getInfoPlanets.results);\n        setCopyResults(getInfoPlanets.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n\n    loading();\n  }, []);\n  const context = {\n    data,\n    isLoading,\n    loadError,\n    filters,\n    setFilterName,\n    setData,\n    copyResults\n  };\n  const {\n    children\n  } = props;\n  return /*#__PURE__*/React.createElement(PlanetContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;\nexport default PlanetProvider;","map":{"version":3,"sources":["/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Context/PlanetProvider.js"],"names":["React","useEffect","useState","PropTypes","planetsAPI","PlanetContext","PlanetProvider","props","data","setData","isLoading","setIsLoading","loadError","setLoadError","copyResults","setCopyResults","filters","setFilters","filteByName","name","setFilterName","event","value","target","toLowerCase","loading","getInfoPlanets","results","error","context","children","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC;AACrCgB,IAAAA,WAAW,EAAE;AACXC,MAAAA,IAAI,EAAE;AADK;AADwB,GAAD,CAAtC;AAMAlB,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMmB,aAAa,GAAIC,KAAD,IAAW;AAC/B,YAAM;AAAEC,QAAAA;AAAF,UAAYD,KAAK,CAACE,MAAxB;AACAN,MAAAA,UAAU,CAAC;AAAEC,QAAAA,WAAW,EAAE;AAAEC,UAAAA,IAAI,EAAEG,KAAK,CAACE,WAAN;AAAR;AAAf,OAAD,CAAV;AACD,KAHD;;AAIA,UAAMC,OAAO,GAAG,YAAY;AAC1B,UAAI;AACFd,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,cAAMa,cAAc,GAAG,MAAMtB,UAAU,EAAvC;AACAK,QAAAA,OAAO,CAACiB,cAAc,CAACC,OAAhB,CAAP;AACAZ,QAAAA,cAAc,CAACW,cAAc,CAACC,OAAhB,CAAd;AACAhB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAPD,CAOE,OAAOiB,KAAP,EAAc;AACdf,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAZD;;AAaAc,IAAAA,OAAO;AACR,GApBQ,EAoBN,EApBM,CAAT;AAsBA,QAAMI,OAAO,GAAG;AACdrB,IAAAA,IADc;AAEdE,IAAAA,SAFc;AAGdE,IAAAA,SAHc;AAIdI,IAAAA,OAJc;AAKdI,IAAAA,aALc;AAMdX,IAAAA,OANc;AAOdK,IAAAA;AAPc,GAAhB;AAQA,QAAM;AAAEgB,IAAAA;AAAF,MAAevB,KAArB;AAEA,sBAEE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAGsB,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIC,QADJ,CAFF;AAMD;;AAEDxB,cAAc,CAACyB,SAAf,GAA2B;AACzBD,EAAAA,QAAQ,EAAE3B,SAAS,CAAC6B;AADK,EAEzBC,UAFF;AAIA,eAAe3B,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsAPI from '../services/planetsAPI';\nimport PlanetContext from './PlanetsContext';\n\nfunction PlanetProvider(props) {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [copyResults, setCopyResults] = useState([]);\n  const [filters, setFilters] = useState({\n    filteByName: {\n      name: '',\n    },\n  });\n\n  useEffect(() => {\n\n    const setFilterName = (event) => {\n      const { value } = event.target;\n      setFilters({ filteByName: { name: value.toLowerCase() } });\n    };\n    const loading = async () => {\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getInfoPlanets = await planetsAPI();\n        setData(getInfoPlanets.results);\n        setCopyResults(getInfoPlanets.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n    loading();\n  }, []);\n\n  const context = {\n    data,\n    isLoading,\n    loadError,\n    filters,\n    setFilterName,\n    setData,\n    copyResults };\n  const { children } = props;\n\n  return (\n\n    <PlanetContext.Provider value={ context }>\n      { children }\n    </PlanetContext.Provider>\n  );\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default PlanetProvider;\n"]},"metadata":{},"sourceType":"module"}