{"ast":null,"code":"import _regeneratorRuntime from\"/home/alex/projetos/Portif\\xF3lio-Web/docs/Star-wars-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/alex/projetos/Portif\\xF3lio-Web/docs/Star-wars-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"/home/alex/projetos/Portif\\xF3lio-Web/docs/Star-wars-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/alex/projetos/Portif\\xF3lio-Web/docs/Star-wars-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/alex/projetos/Portif\\xF3lio-Web/docs/Star-wars-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import planetsAPI from'../services/planetsAPI';import PlanetsContext from'./PlanetsContext';function PlanetsProvider(_ref){var children=_ref.children;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),isLoading=_useState4[0],setIsLoading=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),loadError=_useState6[0],setLoadError=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),copyResults=_useState8[0],setcopyResults=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),allTypes=_useState10[0],setAllTypes=_useState10[1];var _useState11=useState({filterByName:{name:''},filterByNumericValues:[],order:{column:'name',sort:'ASC'}}),_useState12=_slicedToArray(_useState11,2),filters=_useState12[0],setFilters=_useState12[1];var setOrderSort=function setOrderSort(column,sort){setFilters(_objectSpread(_objectSpread({},filters),{},{order:{column:column,sort:sort}}));};var setFilterName=function setFilterName(event){var value=event.target.value;setFilters(_objectSpread(_objectSpread({},filters),{},{filterByName:{name:value.toLowerCase()}}));};var sendFilterNumeric=function sendFilterNumeric(obj){var filterByNumericValues=filters.filterByNumericValues;setFilters(_objectSpread(_objectSpread({},filters),{},{filterByNumericValues:[].concat(_toConsumableArray(filterByNumericValues),[obj])}));};var deleteFilter=function deleteFilter(arr){setFilters(_objectSpread(_objectSpread({},filters),{},{filterByNumericValues:arr}));};var resetFilter=function resetFilter(){setFilters(_objectSpread(_objectSpread({},filters),{},{filterByNumericValues:[]}));};var addType=function addType(type){setAllTypes([].concat(_toConsumableArray(allTypes),[type]));};useEffect(function(){var loading=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var getInfoPlanets;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setIsLoading(true);setLoadError(false);_context.next=5;return planetsAPI();case 5:getInfoPlanets=_context.sent;setData(getInfoPlanets.results);setcopyResults(getInfoPlanets.results);setIsLoading(false);_context.next=15;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);setLoadError(true);setIsLoading(false);case 15:case\"end\":return _context.stop();}}},_callee,null,[[0,11]]);}));return function loading(){return _ref2.apply(this,arguments);};}();loading();},[]);var context={data:data,isLoading:isLoading,loadError:loadError,filters:filters,setFilterName:setFilterName,setData:setData,copyResults:copyResults,sendFilterNumeric:sendFilterNumeric,deleteFilter:deleteFilter,resetFilter:resetFilter,allTypes:allTypes,addType:addType,setOrderSort:setOrderSort};return/*#__PURE__*/React.createElement(PlanetsContext.Provider,{value:context},children);}export default PlanetsProvider;","map":{"version":3,"sources":["/home/alex/projetos/PortifÃ³lio-Web/docs/Star-wars-project/src/Context/PlanetProvider.js"],"names":["React","useEffect","useState","planetsAPI","PlanetsContext","PlanetsProvider","children","data","setData","isLoading","setIsLoading","loadError","setLoadError","copyResults","setcopyResults","allTypes","setAllTypes","filterByName","name","filterByNumericValues","order","column","sort","filters","setFilters","setOrderSort","setFilterName","event","value","target","toLowerCase","sendFilterNumeric","obj","deleteFilter","arr","resetFilter","addType","type","loading","getInfoPlanets","results","context"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsAPI from '../services/planetsAPI';\nimport PlanetsContext from './PlanetsContext';\n\nfunction PlanetsProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [copyResults, setcopyResults] = useState([]);\n  const [allTypes, setAllTypes] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValues: [],\n    order: {\n      column: 'name',\n      sort: 'ASC',\n    },\n  });\n\n  const setOrderSort = (column, sort) => {\n    setFilters({ ...filters, order: { column, sort } });\n  };\n\n  const setFilterName = (event) => {\n    const { value } = event.target;\n    setFilters({ ...filters, filterByName: { name: value.toLowerCase() } });\n  };\n\n  const sendFilterNumeric = (obj) => {\n    const { filterByNumericValues } = filters;\n    setFilters({ ...filters, filterByNumericValues: [...filterByNumericValues, obj] });\n  };\n\n  const deleteFilter = (arr) => {\n    setFilters({ ...filters, filterByNumericValues: arr });\n  };\n\n  const resetFilter = () => {\n    setFilters({ ...filters, filterByNumericValues: [] });\n  };\n\n  const addType = (type) => {\n    setAllTypes([...allTypes, type]);\n  };\n\n  useEffect(() => {\n    const loading = async () => {\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getInfoPlanets = await planetsAPI();\n        setData(getInfoPlanets.results);\n        setcopyResults(getInfoPlanets.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n    loading();\n  }, []);\n\n  const context = {\n    data,\n    isLoading,\n    loadError,\n    filters,\n    setFilterName,\n    setData,\n    copyResults,\n    sendFilterNumeric,\n    deleteFilter,\n    resetFilter,\n    allTypes,\n    addType,\n    setOrderSort };\n\n  return (\n    <PlanetsContext.Provider value={ context }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nPlanetsProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default PlanetsProvider;\n"]},"metadata":{},"sourceType":"module"}