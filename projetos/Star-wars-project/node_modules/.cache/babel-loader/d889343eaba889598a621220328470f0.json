{"ast":null,"code":"var _jsxFileName = \"/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Context/PlanetProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsApi from '../services/planetsAPI';\nimport PlanetsContext from './PlanetsContext';\n\nfunction PlanetsProvider(props) {\n  const [data, setdata] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  useEffect(() => {\n    const load = async () => {\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getPlanetsInfo = await planetsApi();\n        setdata(getPlanetsInfo.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n\n    load();\n  }, []);\n  const context = {\n    data,\n    isLoading,\n    loadError\n  };\n  const {\n    children\n  } = props;\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nPlanetsProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;\nexport default PlanetsProvider;","map":{"version":3,"sources":["/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Context/PlanetProvider.js"],"names":["React","useEffect","useState","PropTypes","planetsApi","PlanetsContext","PlanetsProvider","props","data","setdata","isLoading","setIsLoading","loadError","setLoadError","load","getPlanetsInfo","results","error","context","children","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,IAAI,GAAG,YAAY;AACvB,UAAI;AACFH,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,cAAME,cAAc,GAAG,MAAMX,UAAU,EAAvC;AACAK,QAAAA,OAAO,CAACM,cAAc,CAACC,OAAhB,CAAP;AACAL,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAND,CAME,OAAOM,KAAP,EAAc;AACdJ,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAXD;;AAYAG,IAAAA,IAAI;AACL,GAdQ,EAcN,EAdM,CAAT;AAeA,QAAMI,OAAO,GAAG;AAAEV,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAhB;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAeZ,KAArB;AACA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAGW,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,QADH,CADF;AAKD;;AAEDb,eAAe,CAACc,SAAhB,GAA4B;AAC1BD,EAAAA,QAAQ,EAAEhB,SAAS,CAACkB;AADM,EAE1BC,UAFF;AAIA,eAAehB,eAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsApi from '../services/planetsAPI';\nimport PlanetsContext from './PlanetsContext';\n\nfunction PlanetsProvider(props) {\n  const [data, setdata] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n\n  useEffect(() => {\n    const load = async () => {\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getPlanetsInfo = await planetsApi();\n        setdata(getPlanetsInfo.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n    load();\n  }, []);\n  const context = { data, isLoading, loadError };\n  const { children } = props;\n  return (\n    <PlanetsContext.Provider value={ context }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nPlanetsProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default PlanetsProvider;\n"]},"metadata":{},"sourceType":"module"}