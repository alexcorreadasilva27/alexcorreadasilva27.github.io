{"ast":null,"code":"var _jsxFileName = \"/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Context/PlanetProvider.js\";\nimport React, { userEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsAPI from '../services/planetsAPI';\nimport PlanetContext from './PlanetContext';\n\nfunction PlanetProvider(props) {\n  const {\n    data,\n    setData\n  } = useState([]);\n  const {\n    isLoading,\n    setIsLoading\n  } = useState(true);\n  const {\n    loadError,\n    setLoadError\n  } = useState(false);\n  useEffect(() => {\n    const load = async () => {\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getPlanetsInfo = await planetsApi();\n        setdata(getPlanetsInfo.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n\n    load();\n  }, []);\n  const context = {\n    data,\n    isLoading,\n    loadError\n  };\n  const {\n    children\n  } = props;\n  return /*#__PURE__*/React.createElement(PlanetContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;\nexport default PlanetProvider;","map":{"version":3,"sources":["/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Context/PlanetProvider.js"],"names":["React","userEffect","useState","PropTypes","planetsAPI","PlanetContext","PlanetProvider","props","data","setData","isLoading","setIsLoading","loadError","setLoadError","useEffect","load","getPlanetsInfo","planetsApi","setdata","results","error","context","children","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAEQ,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA8BT,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM;AAAEU,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA8BX,QAAQ,CAAC,KAAD,CAA5C;AAEDY,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMC,IAAI,GAAG,YAAY;AACvB,UAAI;AACFJ,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,cAAMG,cAAc,GAAG,MAAMC,UAAU,EAAvC;AACAC,QAAAA,OAAO,CAACF,cAAc,CAACG,OAAhB,CAAP;AACAR,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAND,CAME,OAAOS,KAAP,EAAc;AACdP,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAXD;;AAYAI,IAAAA,IAAI;AACL,GAdO,EAcL,EAdK,CAAT;AAeC,QAAMM,OAAO,GAAG;AAAEb,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAhB;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAef,KAArB;AACA,sBAEE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAGc,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIC,QADJ,CAFF;AAMD;;AAEDhB,cAAc,CAACiB,SAAf,GAA2B;AACzBD,EAAAA,QAAQ,EAAEnB,SAAS,CAACqB;AADK,EAEzBC,UAFF;AAIA,eAAenB,cAAf","sourcesContent":["import React, { userEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsAPI from '../services/planetsAPI';\nimport PlanetContext from './PlanetContext';\n\nfunction PlanetProvider(props) {\n  const { data, setData } = useState([]);\n  const { isLoading, setIsLoading } = useState(true);\n  const { loadError, setLoadError } = useState(false);\n\n useEffect(() => {\n    const load = async () => {\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getPlanetsInfo = await planetsApi();\n        setdata(getPlanetsInfo.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n    load();\n  }, []);\n  const context = { data, isLoading, loadError };\n  const { children } = props;\n  return (\n\n    <PlanetContext.Provider value={ context }>\n      { children }\n    </PlanetContext.Provider>\n  );\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default PlanetProvider;\n"]},"metadata":{},"sourceType":"module"}