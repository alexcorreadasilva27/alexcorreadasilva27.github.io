{"ast":null,"code":"var _jsxFileName = \"/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Components/Table.js\";\nimport React, { useContext, useEffect } from 'react';\nimport PlanestContext from '../Context/PlanetsContext';\n\nfunction Table() {\n  const context = useContext(PlanestContext);\n  const {\n    data,\n    isLoading,\n    filters,\n    setData,\n    copyResults\n  } = context;\n  const {\n    filterByNumericValues\n  } = filters;\n  const {\n    name\n  } = filters.filterByName;\n  useEffect(() => {\n    if (name.length < 1) return setData(copyResults);\n    const filterPlanets = data.filter(planet => planet.name.toLowerCase().includes(name));\n    setData(filterPlanets);\n  }, [name]);\n\n  const resetPlanets = () => {\n    setData(copyResults);\n  };\n\n  const checkComparison = currItem => {\n    const currColumn = currItem.column;\n    const currComparison = currItem.comparison;\n    const currValue = Number(curr);\n  };\n\n  if (isLoading) return /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 25\n    }\n  }, \"Loading...\");\n  const infos = Object.keys(data[0]);\n  if (data.length < 1) return /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 32\n    }\n  }, \"teste\");\n  const filterInfo = infos.filter(item => item !== 'url');\n  return /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, filterInfo.map((item, index) => /*#__PURE__*/React.createElement(\"th\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 45\n    }\n  }, item)))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, data.map(info => /*#__PURE__*/React.createElement(\"tr\", {\n    key: info.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, info.name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, info.rotation_period), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, info.orbital_period), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, info.diameter), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, info.climate), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, info.gravity), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, info.terrain), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, info.surface_water), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, info.population), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, info.residents.map(resident => resident)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, info.films.map(film => film)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, info.created), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, info.edited)))));\n}\n\nexport default Table;","map":{"version":3,"sources":["/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Components/Table.js"],"names":["React","useContext","useEffect","PlanestContext","Table","context","data","isLoading","filters","setData","copyResults","filterByNumericValues","name","filterByName","length","filterPlanets","filter","planet","toLowerCase","includes","resetPlanets","checkComparison","currItem","currColumn","column","currComparison","comparison","currValue","Number","curr","infos","Object","keys","filterInfo","item","map","index","info","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","residents","resident","films","film","created","edited"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport PlanestContext from '../Context/PlanetsContext';\n\nfunction Table() {\n  const context = useContext(PlanestContext);\n\n  const { data, isLoading, filters, setData, copyResults } = context;\n  const { filterByNumericValues} = filters;\n  const { name } = filters.filterByName;\n\n  useEffect(() => {\n    if (name.length < 1) return setData(copyResults);\n    const filterPlanets = data\n      .filter((planet) => planet.name.toLowerCase().includes(name));\n    setData(filterPlanets);\n  }, [name]);\n\n  const resetPlanets = () => {\n    setData(copyResults);\n  };\n\n  const checkComparison = (currItem) => {\n    const currColumn = currItem.column;\n    const currComparison = currItem.comparison;\n    const currValue = Number(curr)\n  };\n\n  if (isLoading) return <h2>Loading...</h2>;\n\n  const infos = Object.keys(data[0]);\n\n  if (data.length < 1) return (<h2>teste</h2>);\n\n  const filterInfo = infos.filter((item) => item !== 'url');\n\n  return (\n    <table>\n\n      <thead>\n\n        <tr>\n          { filterInfo.map((item, index) => <th key={ index }>{item}</th>)}\n        </tr>\n\n      </thead>\n\n      <tbody>\n\n        {data.map((info) => (\n\n          <tr key={ info.name }>\n\n            <td>{info.name}</td>\n            <td>{info.rotation_period}</td>\n            <td>{info.orbital_period}</td>\n            <td>{info.diameter}</td>\n            <td>{info.climate}</td>\n            <td>{info.gravity}</td>\n            <td>{info.terrain}</td>\n            <td>{info.surface_water}</td>\n            <td>{info.population}</td>\n            <td>{info.residents.map((resident) => resident)}</td>\n            <td>{info.films.map((film) => film)}</td>\n            <td>{info.created}</td>\n            <td>{info.edited}</td>\n\n          </tr>\n\n        ))}\n\n      </tbody>\n\n    </table>\n  );\n}\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}