{"ast":null,"code":"var _jsxFileName = \"/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Context/PlanetProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsAPI from '../services/planetsAPI';\nimport PlanetContext from './PlanetsContext';\n\nfunction PlanetProvider(props) {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  useEffect(() => {\n    const loading = async () => {\n      const [data, setData] = useState([]);\n      const [filters, setFilters] = useState({\n        filteByName: {\n          name: ''\n        }\n      });\n      const [copyResults, setCopyResults] = useState([]);\n\n      const setFilterName = event => {};\n\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getInfoPlanets = await planetsAPI();\n        setData(getInfoPlanets.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n\n    loading();\n  }, []);\n  const context = {\n    data,\n    isLoading,\n    loadError\n  };\n  const {\n    children\n  } = props;\n  return /*#__PURE__*/React.createElement(PlanetContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;\nexport default PlanetProvider;","map":{"version":3,"sources":["/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Context/PlanetProvider.js"],"names":["React","useEffect","useState","PropTypes","planetsAPI","PlanetContext","PlanetProvider","props","data","setData","isLoading","setIsLoading","loadError","setLoadError","loading","filters","setFilters","filteByName","name","copyResults","setCopyResults","setFilterName","event","getInfoPlanets","results","error","context","children","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,OAAO,GAAG,YAAY;AAC1B,YAAM,CAACN,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,YAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC;AACrCe,QAAAA,WAAW,EAAE;AACXC,UAAAA,IAAI,EAAE;AADK;AADwB,OAAD,CAAtC;AAMA,YAAM,CAACC,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,EAAD,CAA9C;;AACA,YAAMmB,aAAa,GAAIC,KAAD,IAAW,CAEhC,CAFD;;AAGA,UAAI;AACFX,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,cAAMU,cAAc,GAAG,MAAMnB,UAAU,EAAvC;AACAK,QAAAA,OAAO,CAACc,cAAc,CAACC,OAAhB,CAAP;AACAb,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAND,CAME,OAAOc,KAAP,EAAc;AACdZ,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAtBD;;AAuBAG,IAAAA,OAAO;AACR,GAzBQ,EAyBN,EAzBM,CAAT;AA2BA,QAAMY,OAAO,GAAG;AAAElB,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAhB;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAepB,KAArB;AAEA,sBAEE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAGmB,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIC,QADJ,CAFF;AAMD;;AAEDrB,cAAc,CAACsB,SAAf,GAA2B;AACzBD,EAAAA,QAAQ,EAAExB,SAAS,CAAC0B;AADK,EAEzBC,UAFF;AAIA,eAAexB,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsAPI from '../services/planetsAPI';\nimport PlanetContext from './PlanetsContext';\n\nfunction PlanetProvider(props) {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n\n  useEffect(() => {\n    const loading = async () => {\n      const [data, setData] = useState([]);\n      const [filters, setFilters] = useState({\n        filteByName: {\n          name: '',\n        },\n      });\n\n      const [copyResults, setCopyResults] = useState([]);\n      const setFilterName = (event) => {\n        \n      }\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getInfoPlanets = await planetsAPI();\n        setData(getInfoPlanets.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n    loading();\n  }, []);\n\n  const context = { data, isLoading, loadError };\n  const { children } = props;\n\n  return (\n\n    <PlanetContext.Provider value={ context }>\n      { children }\n    </PlanetContext.Provider>\n  );\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default PlanetProvider;\n"]},"metadata":{},"sourceType":"module"}