{"ast":null,"code":"var _jsxFileName = \"/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Context/PlanetProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsAPI from '../services/planetsAPI';\nimport PlanetsContext from './PlanetsContext';\n\nfunction PlanetProvider(props) {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [copyResults, setCopyResults] = useState([]);\n  const [allTypes, setAllTypes] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: ''\n    },\n    filterByNumericValues: [],\n    order: {\n      column: 'name',\n      sort: 'ASC'\n    }\n  });\n\n  const setOrderSort = (column, sort) => {\n    setFilters({ ...filter,\n      order: {\n        column,\n        sort\n      }\n    });\n  };\n\n  const setFilterName = event => {\n    const {\n      value\n    } = event.target;\n    setFilters({ ...filters,\n      filteByName: {\n        name: value.toLowerCase()\n      }\n    });\n  };\n\n  const sendFilterNumeric = obj => {\n    const {\n      filterByNumericValues\n    } = filters;\n    setFilters({ ...filters,\n      filterByNumericValues: [...filterByNumericValues, obj]\n    });\n  };\n\n  const deleteFilter = arr => {\n    setFilters({ ...filter,\n      filterByNumericValues: arr\n    });\n  };\n\n  const resetFilter = () => {\n    setFilters({ ...filters,\n      filterByNumericValues: []\n    });\n  };\n\n  const addtype = type => {\n    setAllTypes([...allTypes, type]);\n  };\n\n  useEffect(() => {\n    const loading = async () => {\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getInfoPlanets = await planetsAPI();\n        setData(getInfoPlanets.results);\n        setCopyResults(getInfoPlanets.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n\n    loading();\n  }, []);\n  const context = {\n    data,\n    isLoading,\n    loadError,\n    filters,\n    setFilterName,\n    setData,\n    copyResults,\n    sendFilterNumeric,\n    deleteFilter,\n    resetFilter,\n    allTypes,\n    addtype,\n    setOrderSort\n  };\n  const {\n    children\n  } = props;\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;\nexport default PlanetProvider;","map":{"version":3,"sources":["/home/alex/projetos/sd-013-b-project-starwars-planets-search/src/Context/PlanetProvider.js"],"names":["React","useEffect","useState","PropTypes","planetsAPI","PlanetsContext","PlanetProvider","props","data","setData","isLoading","setIsLoading","loadError","setLoadError","copyResults","setCopyResults","allTypes","setAllTypes","filters","setFilters","filterByName","name","filterByNumericValues","order","column","sort","setOrderSort","filter","setFilterName","event","value","target","filteByName","toLowerCase","sendFilterNumeric","obj","deleteFilter","arr","resetFilter","addtype","type","loading","getInfoPlanets","results","error","context","children","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport planetsAPI from '../services/planetsAPI';\nimport PlanetsContext from './PlanetsContext';\n\nfunction PlanetProvider(props) {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadError, setLoadError] = useState(false);\n  const [copyResults, setCopyResults] = useState([]);\n  const [allTypes, setAllTypes] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValues: [],\n    order: {\n      column: 'name',\n      sort: 'ASC',\n    },\n  });\n\n  const setOrderSort = (column, sort) => {\n    setFilters({ ...filter, order: { column, sort } });\n  };\n\n  const setFilterName = (event) => {\n    const { value } = event.target;\n    setFilters({ ...filters, filteByName: { name: value.toLowerCase() } });\n  };\n\n  const sendFilterNumeric = (obj) => {\n    const { filterByNumericValues } = filters;\n    setFilters({ ...filters, filterByNumericValues: [...filterByNumericValues, obj] });\n  };\n\n  const deleteFilter = (arr) => {\n    setFilters({ ...filter, filterByNumericValues: arr });\n  };\n\n  const resetFilter = () => {\n    setFilters({ ...filters, filterByNumericValues: [] });\n  };\n\n  const addtype = (type) => {\n    setAllTypes([...allTypes, type]);\n  };\n\n  useEffect(() => {\n    const loading = async () => {\n      try {\n        setIsLoading(true);\n        setLoadError(false);\n        const getInfoPlanets = await planetsAPI();\n        setData(getInfoPlanets.results);\n        setCopyResults(getInfoPlanets.results);\n        setIsLoading(false);\n      } catch (error) {\n        setLoadError(true);\n        setIsLoading(false);\n      }\n    };\n    loading();\n  }, []);\n\n  const context = {\n    data,\n    isLoading,\n    loadError,\n    filters,\n    setFilterName,\n    setData,\n    copyResults,\n    sendFilterNumeric,\n    deleteFilter,\n    resetFilter,\n    allTypes,\n    addtype,\n  setOrderSort };\n  const { children } = props;\n\n  return (\n\n    <PlanetsContext.Provider value={ context }>\n      { children }\n    </PlanetsContext.Provider>\n  );\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default PlanetProvider;\n"]},"metadata":{},"sourceType":"module"}